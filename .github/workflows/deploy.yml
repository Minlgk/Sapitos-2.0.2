name: Deploy to Cloud Foundry

on:
  push:
    branches:
      - CloudFoundry

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    environment: .env

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud Foundry CLI
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget -O cf-cli.deb https://github.com/cloudfoundry/cli/releases/download/v8.14.0/cf8-cli-installer_8.14.0_x86-64.deb
          sudo dpkg -i cf-cli.deb

      - name: Diagnostic checks
        run: |
          echo "Checking CF CLI version..."
          cf version
          echo "Testing API connectivity..."
          cf api "https://api.cf.us10-001.hana.ondemand.com" --skip-ssl-validation
          echo "API connectivity test completed."

      - name: Login to Cloud Foundry
        run: |
          echo "Setting API endpoint to https://api.cf.us10-001.hana.ondemand.com"
          cf api "https://api.cf.us10-001.hana.ondemand.com"
          
          echo "--- DEBUGGING CREDENTIALS ---"
          echo "Using hardcoded credentials"
          echo "-------------------------"
          
          echo "Attempting Cloud Foundry login..."
          
          # Hardcoded credentials approach
          CF_USERNAME="a00836682@tec.mx"
          CF_PASSWORD="AxelNewPassword2025$"
          
          echo "Attempting login with username/password..."
          echo "Using command: cf login -u \"$CF_USERNAME\" -p \"REDACTED\""
          # Try login with detailed error output
          if CF_TRACE=true cf login -u "$CF_USERNAME" -p "$CF_PASSWORD" 2>&1; then
            echo "Login successful with username/password."
          else
            echo "Username/password login failed."
            echo "Exit code: $?"
            echo "Trying again with verbose output..."
            CF_TRACE=true cf login -u "$CF_USERNAME" -p "$CF_PASSWORD" || echo "CF login failed with exit code: $?"
            
            echo "Trying alternative authentication approach..."
            # Try passing credentials in a different way
            echo "$CF_PASSWORD" | cf auth "$CF_USERNAME" || echo "Alternative auth method failed with exit code: $?"
            
            echo "Login attempts failed."
            exit 1
          fi

      - name: Deploy Frontend
        run: |
          cd frontend
          rm -rf dist
          npm install 
          npm run build
          
          # Comprobar contenido del Staticfile
          echo "Contenido del Staticfile:"
          cat dist/Staticfile
          
          # Modificar el Staticfile para eliminar cualquier referencia a root: dist
          sed -i 's/root: dist/root: ./g' dist/Staticfile
          echo "Contenido del Staticfile después de modificar:"
          cat dist/Staticfile
          
          # Corregir el archivo nginx.conf - falta punto y coma en directiva listen línea 20
          echo "Primeras 25 líneas del archivo nginx.conf:"
          head -n 25 dist/nginx.conf
          
          # Arreglar el problema de la línea "listen" sin punto y coma
          sed -i 's/listen 8080/listen 8080;/g' dist/nginx.conf
          echo "Líneas del nginx.conf después de la corrección:"
          grep -n "listen" dist/nginx.conf
          
          # Change to dist directory and create a simple manifest
          cd dist
          echo "applications:" > manifest.yml
          echo "  - name: sapitos-frontend" >> manifest.yml
          echo "    memory: 64M" >> manifest.yml
          echo "    buildpacks:" >> manifest.yml
          echo "      - staticfile_buildpack" >> manifest.yml
          echo "    routes:" >> manifest.yml
          echo "      - route: sapitos-frontend.cfapps.us10-001.hana.ondemand.com" >> manifest.yml
          # Push directly from dist directory
          cf push -f manifest.yml

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: .env

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud Foundry CLI
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget -O cf-cli.deb https://github.com/cloudfoundry/cli/releases/download/v8.14.0/cf8-cli-installer_8.14.0_x86-64.deb
          sudo dpkg -i cf-cli.deb

      - name: Diagnostic checks
        run: |
          echo "Checking CF CLI version..."
          cf version
          echo "Testing API connectivity..."
          cf api "https://api.cf.us10-001.hana.ondemand.com" --skip-ssl-validation
          echo "API connectivity test completed."

      - name: Login to Cloud Foundry
        run: |
          echo "Setting API endpoint to https://api.cf.us10-001.hana.ondemand.com"
          cf api "https://api.cf.us10-001.hana.ondemand.com"
          
          echo "--- DEBUGGING CREDENTIALS ---"
          echo "Using hardcoded credentials"
          echo "-------------------------"
          
          echo "Attempting Cloud Foundry login..."
          
          # Hardcoded credentials approach
          CF_USERNAME="a00836682@tec.mx"
          CF_PASSWORD="AxelNewPassword2025$"
          
          echo "Attempting login with username/password..."
          echo "Using command: cf login -u \"$CF_USERNAME\" -p \"REDACTED\""
          # Try login with detailed error output
          if CF_TRACE=true cf login -u "$CF_USERNAME" -p "$CF_PASSWORD" 2>&1; then
            echo "Login successful with username/password."
          else
            echo "Username/password login failed."
            echo "Exit code: $?"
            echo "Trying again with verbose output..."
            CF_TRACE=true cf login -u "$CF_USERNAME" -p "$CF_PASSWORD" || echo "CF login failed with exit code: $?"
            
            echo "Trying alternative authentication approach..."
            # Try passing credentials in a different way
            echo "$CF_PASSWORD" | cf auth "$CF_USERNAME" || echo "Alternative auth method failed with exit code: $?"
            
            echo "Login attempts failed."
            exit 1
          fi

      - name: Prepare environment variables
        env:
          SERVER_NODE: ${{ secrets.SERVER_NODE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          BACK_PORT: ${{ secrets.BACK_PORT }}
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        run: |
          echo "Environment variables set dynamically from GitHub secrets."

      - name: Debug Environment Variables
        env:
          SERVER_NODE: ${{ secrets.SERVER_NODE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "Debugging environment variables..."
          echo "SERVER_NODE: $SERVER_NODE"
          echo "DB_USERNAME: $DB_USERNAME"
          echo "DB_PASSWORD is set: $(test -n \"$DB_PASSWORD\" && echo true || echo false)"

      - name: Set environment variables for Cloud Foundry app
        env:
          SERVER_NODE: ${{ secrets.SERVER_NODE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          BACK_PORT: ${{ secrets.BACK_PORT }}
          AUTH_OTP_SECRET: ${{ secrets.AUTH_OTP_SECRET }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        run: |
          cf set-env Sapitos-backend SERVER_NODE "$SERVER_NODE"
          cf set-env Sapitos-backend DB_USERNAME "$DB_USERNAME"
          cf set-env Sapitos-backend DB_PASSWORD "$DB_PASSWORD"
          cf set-env Sapitos-backend JWT_SECRET "$JWT_SECRET"
          cf set-env Sapitos-backend BACK_PORT "$BACK_PORT"
          cf set-env Sapitos-backend AUTH_OTP "false"
          cf set-env Sapitos-backend AUTH_OTP_SECRET "$AUTH_OTP_SECRET"
          cf set-env Sapitos-backend EMAIL_USER "$EMAIL_USER"
          cf set-env Sapitos-backend EMAIL_PASSWORD "$EMAIL_PASSWORD"
          cf set-env Sapitos-backend EMAIL_HOST "$EMAIL_HOST"
          cf set-env Sapitos-backend EMAIL_PORT "$EMAIL_PORT"
          cf set-env Sapitos-backend EMAIL_FROM "$EMAIL_FROM"
          cf restage Sapitos-backend || true # Ensure env changes are applied

      - name: Deploy Backend
        run: |
          cd backend
          # Update manifest to include necessary environment variables
          cat > manifest.yml << EOL
          applications:
            - name: Sapitos-backend
              memory: 512M
              buildpacks:
                - nodejs_buildpack
              path: .
              command: node server.js
              env:
                NODE_ENV: production
                DISABLE_MLOPS: true
                SERVER_NODE: ${{ secrets.SERVER_NODE }}
                DB_USERNAME: ${{ secrets.DB_USERNAME }}
                DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                JWT_SECRET: ${{ secrets.JWT_SECRET }}
                BACK_PORT: ${{ secrets.BACK_PORT }}
                AUTH_OTP: false
                AUTH_OTP_SECRET: ${{ secrets.AUTH_OTP_SECRET }}
                EMAIL_USER: ${{ secrets.EMAIL_USER }}
                EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
                EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
                EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
                EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EOL
          # Push with manifest which includes environment variables
          cf push --no-start
          cf start Sapitos-backend